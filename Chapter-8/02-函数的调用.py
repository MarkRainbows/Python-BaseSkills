# author: Mark


"""
函数在声明的时候不会执行函数体， 只有在调用函数的时候才会执行函数体
"""


def say_hello(name):
    # name = '小明'
    print(name, 'hello')

print('=======')
# 1.函数的调用过程(重点！)

"""
a.物理过程

第一步：回到函数声明的位置
第二步：用实参给形参赋值(传参)
       传参一定要保证每个形参都有值
第三步：执行函数体
第四步：获取返回值
第五步：回到函数调用的位置，接着往后执行

b.函数调用的过程是一个压栈的过程
当函数调用的时候，系统会自动的在内存中栈区间开辟空间，存储函数调用过程中产生的数据
(这儿的数据包括参数和在函数的声明的变量)。当函数调用完成后，对应的内存空间会自动销毁
"""
say_hello('小明')
say_hello('小🌺')

a = 10
b = 20
def change(a, b):
    # a = 10  b=20
    t = a
    a = b
    b = t
    print('函数中:', a, b)

change(a, b)
print('函数外', a, b)