"""__author__ = 余婷"""

# 1.根据实参分为位置参数和关键字参数
"""
a.位置参数
让实参的位置和形参的位置一一对应
"""
def func1(a, b, c):
    # a = 10, b=20, c=100
    print('a:%d b:%d c:%d' % (a, b, c))


func1(10, 20, 100)

"""
b.关键字参数
实参以"形参名=值"的形式来传参
"""
func1(c=100, b=20, a=10)

"""
c.位置参数和关键字参数混合使用
前提：a.保证每个参数都有值; b.位置参数要在关键字参数的前面
"""
func1(100, c=300, b=200)
func1(100, 200, c=300)


# 2.从函数声明的角度又有：参数默认值，不定长参数，参数类型说明
"""
a.参数默认值
声明函数的时候可以给参数设置默认值, 语法：参数名 = 默认值

注意：设置默认值除了可以给参数一个默认的值，也可以对参数的类型进行说明
"""


# 声明函数，并且给每个参数设置默认值
def func2(a=1, b=2, c=3):
    print('a:%d b:%d c:%d' % (a, b, c))


# 如果函数声明的时候参数有默认值，调用函数的时候，有默认值的参数可以不用赋值
func2()
func2(b=20)
func2(10, 20)
func2(10, 20, 30)


# 如果有的参数有默认值，有的参数没有默认值；有默认值的参数一定要放在没有默认值参数的后面
def func3(a, b, c=3):
    print('a:%d b:%d c:%d' % (a, b, c))


func3(10, 20)
func3(10, 20, 30)
func3(b=200, a=100)
func3(b=200, a=100, c=300)
func3(11, b=22)

# 3.不定长参数
"""
不定长参数：声明函数的时候，函数的参数不确定

a.在声明函数的时候，参数名前加一个*,会将这个参数变成元祖，来获取多个实参的值(通过位置参数调用)
"""


# 声明一个函数，功能是求多个数的和
def my_sum(*num):
    print(num)
    print('和：', sum(num))


# 调用参数是不定长参数的函数的时候，不定长参数对应的位置，可以传任意个实参
my_sum(10, 20, 9, 89, 38, 100)
my_sum(10, 20)
my_sum(10)
my_sum()


def func4(name, *scores):
    print(name, scores)


func4('小明', 19, 98, 82, 78, 192)

"""
b.在声明函数的时候，参数名前加两个*,会将这个参数变成字典，来获取多个实参的值（必须使用关键字参数）
"""


def func5(**num):
    print(num)


# 如果是调用不定长关键字参数(参数名前加了两颗*)，调用的时候关键字可以随便命名
func5(a=1, b=2, c=3)
func5(aa=11, bb=22)
func5()


def func6(a, **b):
    print(a, b)


func6('abc', x=10, y=20)

"""
c.一颗*和两颗*一起使用 - 用来表示不定长参数，调用的时候更灵活，可以用位置参数传参，
                      也可以用关键字参数传参，也可以两个一起用
                      
要求，一颗的*参数要放在两颗*参数的前面
"""


def func7(*args, **kwargs):
    print(args, kwargs)


func7()
func7(8, 9, 10, 29)
func7(a=10, b=20, c=30)
func7(1, 2, 3, x=11, y=22)


# 练习：求多个数的和，要求调用函数的时候可以多样性(位置，关键字)
def my_sum2(*args, **kwargs):
    sum1 = 0
    # 获取所有的位置参数
    for item in args:
        sum1 += item

    #  获取所有的关键字参数
    for key in kwargs:
        sum1 += kwargs[key]

    print(sum1)


my_sum2(10, 20, 30)
my_sum2(n1=11, n2=22)
my_sum2(10, 20, 30, n1=11, n2=22)


# 4.参数类型说明
"""
参数类型说明，只是对参数类型进行提示，不能限制参数的类型

a.设置默认值
b.参数名:类型名

注意：类型说明除了说明类型以外，还可以做相应类型对应的语法提示
"""


def func8(a1: list, a: int, b=''):
    a1.append('aa')
    print(a1, a, b)


# func8(10, 'abc')
# func8([1,2], 'hello')
func8([10], 23, 'abc')


