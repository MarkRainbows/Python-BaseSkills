# author：Mark

"""
1.什么是正则表达式
正则表达式就是字符匹配的工具;是由正则符号和普通字符组成，来匹配不同规律的字符串。

2.Python对正则表达式的支持
python中提供了一个re模块，用来支持正则表达式

fullmatch(正则表达式, 字符串) - 用正则表达式去完全匹配字符串，如果匹配成功返回匹配结果，失败返回None 
python中的正则表达式的写法：将正则内容写在字符串中，一般这个字符串的最前面会r/R
"""


import re

# 1  普通字符
"""
普通字符在正则表达式中，代表字符本身
"""
# 匹配一个字符串，第一个字符是'a',第二个字符是'b',第三个字符也是最后一个字符是'c'
re_str = r'abc'
result = re.fullmatch(re_str, 'abc')
print(result)

# 2 .(匹配任意字符)
"""
在正则表达式中，.出现的位置，可以匹配一个任意字符
注意：一个.只能匹配一个字符
"""
# 匹配一个长度上3的字符串，并且第一个字符是'a',最后一个字符是'c',中间是任意字符
re_str = r'a.c'
result = re.fullmatch(re_str, 'a#c')
print(result)

# 3 \w(匹配字母数字或者下划线)
"""
在正则表达式中，\w出现的位置，可以匹配一个任意的字母、数字或者下划线(其实也可以匹配Unicode编码中除了ASCII码剩下的部分)

注意：
一个\w只能匹配一个字符
中文也能匹配
"""
# 匹配一个长度是5的字符串，并且字符串的前两位是数字、字母和下划线，后面是三个任意字符
re_str = r'\w\w...'
result = re.fullmatch(re_str, '_好kll')
print(result)

# 4 \s(匹配空白字符)
"""
空白字符包括：空格、制表符和换行符(空格,\t 制表符,\r 回车,\n 换行)
"""
# 匹配一个长度是4的字符串，并且字符串前两位是字母数字或者下划线(中文),中间一个空白，再一个字母数字或者下划线(中文)
re_str = r'\w\w\s\w'
result = re.fullmatch(re_str, 'hj\n8')
print(result)

# 5 \d(匹配数字字符)
# 匹配一个长度是5的字符串，字符串的前三位是数字字符，后两位是任意字符
re_str = '\d\d\d..'
result = re.fullmatch(re_str, '082de')
print(result)


# 6 \b(检测单词边界)

"""
注意：检测\b出现的位置是否是单词边界，不会对字符进行匹配。
     当正则表达式中出现了\b，匹配的时候去掉\b，匹配成功后再看\b出现的位置是否是单词边界
     
单词边界：字符串开头、字符串结尾、标点符号、空白符号等（只要能够将单词区分开的符号都属于单词边界）
"""
# 匹配字符串'hello,world', 并且要求w前面是单词边界, h前面也是单词边界
re_str = r'\bhello\b,\bworld'
result = re.fullmatch(re_str, 'hello,world')
print(result)

# 7 ^(检测字符串开头)
"""
在match和fullmatch中没有意义, search、findall等中有意义
"""
# 匹配一个字符串前面三个字符是'The'，后面两个任意字符
re_str = r'^The..'
result = re.fullmatch(re_str, 'The2;')    #
print(result)

# 8 $(检测字符串结尾)
"""
在match和fullmatch中没有意义, search、findall等中有意义
"""
# 匹配一个字符串，只有三位，分别是'The',并且e后面是字符串结尾
re_str = r'The$'
result = re.fullmatch(re_str, 'The')
print(result)


# 9 \大写字母
"""
'\大写字母'对应的功能是'\小写字母'功能取反
 
\W - 匹配非数字字母下划线
\D - 匹配非数字字符
\S - 匹配非空白字符
\B - 检测非单词边界
"""
# 匹配一个字符串，第一个字符是数字、第二个是非数字,第三个是空白，第四个是数字字母下划线，最后一个是a;
# 并且要求a前面不是单词边界
re_str = r'\d\D\s\w\Ba'
result = re.fullmatch(re_str, '9H\t_a')
print(result)


# 10 [字符集](匹配中括号出现的任意一个字符)
"""
1.[普通字符集] - 匹配中括号出现的任意一个字符
例如：[abc] - 匹配一个字符是a或者b或者c

注意：a.一个中括号只能匹配一个字符
     b.正则中有特殊功能的单个符号在[]都表示符号本身 例如：.  $  ^ + * ？ |等
     c.匹配字符的组合符号，在中括号中保持原来的功能, 例如: \w  \d \s  \W  \D \S
"""
# 匹配一个长度是2的字符串，第一个字符是数字，第二个字符是b或者c或者=或者数字
re_str = r'\d[bc=\d]'
result = re.fullmatch(re_str, '24')
print(result)

"""
2.[字符1-字符2] - 表示字符1到字符2（注意：要求字符1的编码值要小于字符2）
[a-z]  - 表示匹配所有小写字母
[A-Z]  - 表示匹配所有大写字母
[a-zA-Z] - 匹配所有的字母
[1-7] - 匹配数字字符1到7
[\u4e00-\u9fa5] - 匹配所有的中文

[字符1字符2-] - 这儿的-表示减号本身
"""
# 匹配一个长度是3的字符串,第一个字符是数字字符1到7中的一个，
# 第二个字符是'a'，'b','c','-'中的一个,第三个字符是小写字母
re_str = r'[1-7][abc-][a-z]'
result = re.fullmatch(re_str, '6-z')
print(result)

# 11 [^字符集] - 匹配不在字符集中的任意一个字符

"""
[^abc] - 匹配除了'a','b','c'以外的其他任意一个字符
[^\d] - 匹配除了数字字符以外的其他任意一个字符 
[^a-z] - 匹配除了小写字母以外的其他任意一个字符 

[abc^] - 匹配'a','b','c'或者'^'中的任意一个字符
"""
re_str = r'[^a-z]'
result = re.fullmatch(re_str, '是')
print(result)
















